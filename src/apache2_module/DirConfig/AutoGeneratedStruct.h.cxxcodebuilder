#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2018 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  add_code %Q{
    #ifndef _PASSENGER_APACHE2_MODULE_DIR_CONFIG_AUTOGENERATED_STRUCT_H_
    #define _PASSENGER_APACHE2_MODULE_DIR_CONFIG_AUTOGENERATED_STRUCT_H_

    #ifdef INTELLISENSE
      // These includes do nothing, but keep IntelliSense happy.
      #include <ap_config.h>
      #include <set>
      #include <Constants.h>
      #include <StaticString.h>
      #include "../ConfigGeneral/Common.h"
    #endif
  }

  separator

  comment %q{
    DirConfig/AutoGeneratedStruct.h is automatically generated from DirConfig/AutoGeneratedStruct.h.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to DirConfig/AutoGeneratedStruct.h will be lost.

    To update DirConfig/AutoGeneratedStruct.h:
      rake apache2

    To force regeneration of DirConfig/AutoGeneratedStruct.h:
      rm -f src/apache2_module/DirConfig/AutoGeneratedStruct.h
      rake src/apache2_module/DirConfig/AutoGeneratedStruct.h
  }

  separator

  add_code %Q[
    namespace Passenger {
    namespace Apache2Module {
  ]

  separator

  comment %Q{
    Per-directory configuration information (autogenerated part).

    Use the getter methods to query information, because those will return
    the default value if the value is not specified.
  }
  struct 'AutoGeneratedDirConfig' do
    definitions.each do |definition|
      separator
      comment(definition[3][:desc])
      field(definition[0])
    end

    separator
    separator

    definitions.each do |definition|
      field("StaticString #{definition[2]}SourceFile")
    end

    separator

    definitions.each do |definition|
      field("unsigned int #{definition[2]}SourceLine")
    end

    separator

    definitions.each do |definition|
      field("bool #{definition[2]}ExplicitlySet: 1")
    end

    separator
    separator

    definitions.each do |definition|
      add_getter_function(definition)
    end
  end

  separator

  add_code %Q[
    } // namespace Apache2Module
    } // namespace Passenger

    #endif /* _PASSENGER_APACHE2_MODULE_DIR_CONFIG_AUTOGENERATED_STRUCT_H_ */
  ]
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] == :global ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./
  end
end

def struct_field_for(option)
  if option.key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    "m#{result}"
  end
end

# Returns [definition_source, estimated_size_on_x86_64, name, description]
def definition_for(option)
  field = struct_field_for(option)
  case option[:type]
  when :string
    result = ["StaticString #{field}", 8 + 4]
  when :integer
    result = ["int #{field}", 4]
  when :flag
    result = ["Threeway #{field}", 1]
  when :string_set
    result = ["std::set<std::string> #{field}", 24]
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
  result + [field, option]
end

def definitions
  @definitions ||= begin
    eligible_options = filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS)
    definitions = eligible_options.map { |o| definition_for(o) }
    # Sort the definitions by size in order to make the struct smaller.
    # It's possible to make it even smaller with a smarter algorithm but for now
    # I don't bother.
    definitions.sort! do |d1, d2|
      if d1[1] == d2[1]
        # After sorting on size, sort alphabetically.
        d1[2] <=> d2[2]
      else
        d1[1] <=> d2[1]
      end
    end
  end
end

def add_getter_function(definition)
  field_name = definition[2]
  option = definition[3]

  func_name = definition[2][1..-1]
  func_name = "get#{func_name}"

  if option.key?(:default_expr)
    default_expr = option[:default_expr]
  elsif option.key?(:default)
    default_expr = option[:default].inspect
  end

  case option[:type]
  when :string
    if option.key?(:default_expr)
      default_expr = option[:default_expr]
    elsif option.key?(:default)
      default_expr = "P_STATIC_STRING(#{option[:default].inspect})"
    end
    if default_expr
      function("StaticString #{func_name}() const") do
        add_code %Q{
          if (#{field_name}.empty()) {
            return #{default_expr};
          } else {
            return #{field_name};
          }
        }
      end
    else
      function("StaticString #{func_name}() const") do
        add_code %Q{return #{field_name};}
      end
    end
  when :integer
    if option.key?(:default_expr)
      default_expr = option[:default_expr]
    elsif option.key?(:default)
      default_expr = option[:default].inspect
    end
    if default_expr
      function("int #{func_name}() const") do
        add_code %Q{
          if (#{field_name} == UNSET_INT_VALUE) {
            return #{default_expr};
          } else {
            return #{field_name};
          }
        }
      end
    else
      function("int #{func_name}() const") do
        add_code %Q{return #{field_name};}
      end
    end
  when :flag
    if option.key?(:default_expr)
      default_expr = option[:default_expr]
    elsif option.key?(:default)
      default_expr = option[:default].inspect
    end
    if default_expr
      function("bool #{func_name}() const") do
        add_code %Q{
          if (#{field_name} == Apache2Module::UNSET) {
            return #{default_expr};
          } else {
            return #{field_name} == Apache2Module::ENABLED;
          }
        }
      end
    else
      function("Threeway #{func_name}() const") do
        add_code %Q{return #{field_name};}
      end
    end
  when :string_set
    if option.key?(:default_expr) || option.key?(:default)
      raise "Default values for option type #{option[:type].inspect} (option #{option[:name]}) not yet supported"
    else
      function("const std::set<std::string> &#{func_name}() const") do
        add_code %Q{return #{field_name};}
      end
    end
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
end

main
